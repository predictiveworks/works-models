package de.kp.works.models.osquery.apps
/*
 * Copyright (c) 2019 - 2021 Dr. Krusche & Partner PartG. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @author Stefan Krusche, Dr. Krusche & Partner PartG
 *
 */

import com.google.gson.JsonObject

import java.math.BigInteger
import java.security.MessageDigest
import scala.collection.mutable

trait BaseApp {

  /**
   * Column names
   */
  val ABI = "abi"
  val ABI_VERSION = "abi_version"
  val ACCESS = "access"
  val ACCESSED_TIME = "accessed_time"
  val ACCOUNT_ID = "account_id"
  val ACTION = "action"
  val ACTIVE = "active"
  val ACTIVE_DISKS = "active_disks"
  val ACTIVE_STATE = "active_state"
  val ACTUAL = "actual"
  val ADDITIONAL_PRODUCT_ID = "additional_product_id"
  val ADDR = "addr"
  val ADDRESS = "address"
  val ADDRESS_WIDTH = "address_width"
  val ALGORITHM = "algorithm"
  val ALIAS = "alias"
  val ALIASES = "aliases"
  val ALIGN = "align"
  val ALLOW_MAXIMUM = "allow_maximum"
  val ALLOW_ROOT = "allow_root"
  val ALLOW_SIGNED_ENABLED = "allow_signed_enabled"
  val AMI_ID = "ami_id"
  val AMPERAGE = "amperage"
  val ANONYMOUS = "anonymous"
  val ANTISPYWARE = "antispyware"
  val ANTIVIRUS = "antivirus"
  val API_VERSION = "api_version"
  val APPARMOR = "apparmor"
  val APPLESCRIPT_ENABLED = "applescript_enabled"
  val APPLICATION = "application"
  val ARCH = "arch"
  val ARCHITECTURE = "architecture"
  val ARCHITECTURES = "architectures"
  val ARGS = "args"
  val ARGUMENTS = "arguments"
  val ARRAY_HANDLE = "array_handle"
  val ASSESSMENTS_ENABLED = "assessments_enabled"
  val ASSET_TAG = "asset_tag"
  val ATA_VERSION = "ata_version"
  val ATIME = "atime"
  val ATTACH = "attach"
  val ATTACHED = "attached"
  val ATTRIBUTES = "attributes"
  val AUDIBLE_ALARM = "audible_alarm"
  val AUID = "auid"
  val AUTHENTICATE_USER = "authenticate_user"
  val AUTHENTICATION_PACKAGE = "authentication_package"
  val AUTHOR = "author"
  val AUTHORITY = "authority"
  val AUTHORITY_KEY_ID = "authority_key_id"
  val AUTHORITY_KEY_IDENTIFIER = "authority_key_identifier"
  val AUTHORIZATIONS = "authorizations"
  val AUTO_LOGIN = "auto_login"
  val AUTO_UPDATE = "auto_update"
  val AUTOUPDATE = "autoupdate"
  val AVAILABILITY = "availability"
  val AVAILABILITY_ZONE = "availability_zone"
  val AVERAGE = "average"
  val AVERAGE_MEMORY = "average_memory"
  val AVG_DISK_BYTES_PER_READ = "avg_disk_bytes_per_read"
  val AVG_DISK_BYTES_PER_WRITE = "avg_disk_bytes_per_write"
  val AVG_DISK_READ_QUEUE_LENGTH = "avg_disk_read_queue_length"
  val AVG_DISK_SEC_PER_READ = "avg_disk_sec_per_read"
  val AVG_DISK_SEC_PER_WRITE = "avg_disk_sec_per_write"
  val AVG_DISK_WRITE_QUEUE_LENGTH = "avg_disk_write_queue_length"
  val BACKUP_DATE = "backup_date"
  val BANK_LOCATOR = "bank_locator"
  val BASE64 = "base64"
  val BASE_IMAGE = "base_image"
  val BASE_URI = "base_uri"
  val BASEURL = "baseurl"
  val BASIC_CONSTRAINT = "basic_constraint"
  val BINARY_QUEUE = "binary_queue"
  val BINDING = "binding"
  val BITMAP_CHUNK_SIZE = "bitmap_chunk_size"
  val BITMAP_EXTERNAL_FILE = "bitmap_external_file"
  val BITMAP_ON_MEM = "bitmap_on_mem"
  val BLOCK = "block"
  val BLOCK_SIZE = "block_size"
  val BLOCKS = "blocks"
  val BLOCKS_AVAILABLE = "blocks_available"
  val BLOCKS_FREE = "blocks_free"
  val BLOCKS_SIZE = "blocks_size"
  val BLUETOOTH_SHARING = "bluetooth_sharing"
  val BOARD_MODEL = "board_model"
  val BOARD_SERIAL = "board_serial"
  val BOARD_VENDOR = "board_vendor"
  val BOARD_VERSION = "board_version"
  val BOOT_PARTITION = "boot_partition"
  val BOOT_UUID = "boot_uuid"
  val BP_MICROCODE_DISABLED = "bp_microcode_disabled"
  val BP_MITIGATIONS = "bp_mitigations"
  val BP_SYSTEM_POL_DISABLED = "bp_system_pol_disabled"
  val BREACH_DESCRIPTION = "breach_description"
  val BRIDGE_NF_IP6TABLES = "bridge_nf_ip6tables"
  val BRIDGE_NF_IPTABLES = "bridge_nf_iptables"
  val BROADCAST = "broadcast"
  val BSD_FLAGS = "bsd_flags"
  val BSSID = "bssid"
  val BTIME = "btime"
  val BUFFERS = "buffers"
  val BUILD = "build"
  val BUILD_DISTRO = "build_distro"
  val BUILD_ID = "build_id"
  val BUILD_NUMBER = "build_number"
  val BUILD_PLATFORM = "build_platform"
  val BUILD_TIME = "build_time"
  val BUNDLE_EXECUTABLE = "bundle_executable"
  val BUNDLE_IDENTIFIER = "bundle_identifier"
  val BUNDLE_NAME = "bundle_name"
  val BUNDLE_PACKAGE_TYPE = "bundle_package_type"
  val BUNDLE_PATH = "bundle_path"
  val BUNDLE_SHORT_VERSION = "bundle_short_version"
  val BUNDLE_VERSION = "bundle_version"
  val BUSY_STATE = "busy_state"
  val BYTES = "bytes"
  val BYTES_AVAILABLE = "bytes_available"
  val BYTES_RECEIVED = "bytes_received"
  val BYTES_SENT = "bytes_sent"
  val BYTES_USED = "bytes_used"
  val CA = "ca"
  val CACHE_PATH = "cache_path"
  val CACHED = "cached"
  val CAPABILITY = "capability"
  val CAPNAME = "capname"
  val CAPTION = "caption"
  val CAPTIVE_PORTAL = "captive_portal"
  val CARVE = "carve"
  val CARVE_GUID = "carve_guid"
  val CATEGORY = "category"
  val CDHASH = "cdhash"
  val CELSIUS = "celsius"
  val CERTIFICATE = "certificate"
  val CGROUP_DRIVER = "cgroup_driver"
  val CGROUP_NAMESPACE = "cgroup_namespace"
  val CHAIN = "chain"
  val CHANGE_TYPE = "change_type"
  val CHANNEL = "channel"
  val CHANNEL_BAND = "channel_band"
  val CHANNEL_WIDTH = "channel_width"
  val CHARGED = "charged"
  val CHARGING = "charging"
  val CHASSIS_BRIDGE_CAPABILITY_AVAILABLE = "chassis_bridge_capability_available"
  val CHASSIS_BRIDGE_CAPABILITY_ENABLED = "chassis_bridge_capability_enabled"
  val CHASSIS_DOCSIS_CAPABILITY_AVAILABLE = "chassis_docsis_capability_available"
  val CHASSIS_DOCSIS_CAPABILITY_ENABLED = "chassis_docsis_capability_enabled"
  val CHASSIS_ID = "chassis_id"
  val CHASSIS_ID_TYPE = "chassis_id_type"
  val CHASSIS_MGMT_IPS = "chassis_mgmt_ips"
  val CHASSIS_OTHER_CAPABILITY_AVAILABLE = "chassis_other_capability_available"
  val CHASSIS_OTHER_CAPABILITY_ENABLED = "chassis_other_capability_enabled"
  val CHASSIS_REPEATER_CAPABILITY_AVAILABLE = "chassis_repeater_capability_available"
  val CHASSIS_REPEATER_CAPABILITY_ENABLED = "chassis_repeater_capability_enabled"
  val CHASSIS_ROUTER_CAPABILITY_AVAILABLE = "chassis_router_capability_available"
  val CHASSIS_ROUTER_CAPABILITY_ENABLED = "chassis_router_capability_enabled"
  val CHASSIS_STATION_CAPABILITY_AVAILABLE = "chassis_station_capability_available"
  val CHASSIS_STATION_CAPABILITY_ENABLED = "chassis_station_capability_enabled"
  val CHASSIS_SYS_DESCRIPTION = "chassis_sys_description"
  val CHASSIS_SYSNAME = "chassis_sysname"
  val CHASSIS_TEL_CAPABILITY_AVAILABLE = "chassis_tel_capability_available"
  val CHASSIS_TEL_CAPABILITY_ENABLED = "chassis_tel_capability_enabled"
  val CHASSIS_TYPES = "chassis_types"
  val CHASSIS_WLAN_CAPABILITY_AVAILABLE = "chassis_wlan_capability_available"
  val CHASSIS_WLAN_CAPABILITY_ENABLED = "chassis_wlan_capability_enabled"
  val CHECK_ARRAY_FINISH = "check_array_finish"
  val CHECK_ARRAY_PROGRESS = "check_array_progress"
  val CHECK_ARRAY_SPEED = "check_array_speed"
  val CHECKSUM = "checksum"
  val CHUNK_SIZE = "chunk_size"
  val CID = "cid"
  val CLASS = "class"
  val CLIENT_SITE_NAME = "client_site_name"
  val CMDLINE = "cmdline"
  val CMDLINE_SIZE = "cmdline_size"
  val CODE_INTEGRITY_POLICY_ENFORCEMENT_STATUS = "code_integrity_policy_enforcement_status"
  val CODENAME = "codename"
  val COLLECT_CROSS_PROCESSES = "collect_cross_processes"
  val COLLECT_DATA_FILE_WRITES = "collect_data_file_writes"
  val COLLECT_EMET_EVENTS = "collect_emet_events"
  val COLLECT_FILE_MODS = "collect_file_mods"
  val COLLECT_MODULE_INFO = "collect_module_info"
  val COLLECT_MODULE_LOADS = "collect_module_loads"
  val COLLECT_NET_CONNS = "collect_net_conns"
  val COLLECT_PROCESS_USER_CONTEXT = "collect_process_user_context"
  val COLLECT_PROCESSES = "collect_processes"
  val COLLECT_REG_MODS = "collect_reg_mods"
  val COLLECT_SENSOR_OPERATIONS = "collect_sensor_operations"
  val COLLECT_STORE_FILES = "collect_store_files"
  val COLLISIONS = "collisions"
  val COLOR_DEPTH = "color_depth"
  val COMM = "comm"
  val COMMAND = "command"
  val COMMAND_LINE = "command_line"
  val COMMAND_LINE_TEMPLATE = "command_line_template"
  val COMMENT = "comment"
  val COMMON_NAME = "common_name"
  val COMPILER = "compiler"
  val COMPLETED_TIME = "completed_time"
  val COMPONENTS = "components"
  val COMPRESSED = "compressed"
  val COMPRESSOR = "compressor"
  val COMPUTER_NAME = "computer_name"
  val CONDITION = "condition"
  val CONFIG_ENTRYPOINT = "config_entrypoint"
  val CONFIG_FLAG = "config_flag"
  val CONFIG_HASH = "config_hash"
  val CONFIG_NAME = "config_name"
  val CONFIG_VALID = "config_valid"
  val CONFIG_VALUE = "config_value"
  val CONFIGURED_CLOCK_SPEED = "configured_clock_speed"
  val CONFIGURED_VOLTAGE = "configured_voltage"
  val CONNECTION_ID = "connection_id"
  val CONNECTION_STATUS = "connection_status"
  val CONSISTENCY_SCAN_DATE = "consistency_scan_date"
  val CONSUMER = "consumer"
  val CONTAINERS = "containers"
  val CONTAINERS_PAUSED = "containers_paused"
  val CONTAINERS_RUNNING = "containers_running"
  val CONTAINERS_STOPPED = "containers_stopped"
  val CONTENT = "content"
  val CONTENT_CACHING = "content_caching"
  val CONTENT_TYPE = "content_type"
  val CONVERSION_STATUS = "conversion_status"
  val COPROCESSOR_VERSION = "coprocessor_version"
  val COPY = "copy"
  val COPYRIGHT = "copyright"
  val CORE = "core"
  val COSINE_SIMILARITY = "cosine_similarity"
  val COUNT = "count"
  val COUNTRY_CODE = "country_code"
  val CPU = "cpu"
  val CPU_BRAND = "cpu_brand"
  val CPU_CFS_PERIOD = "cpu_cfs_period"
  val CPU_CFS_QUOTA = "cpu_cfs_quota"
  val CPU_KERNELMODE_USAGE = "cpu_kernelmode_usage"
  val CPU_LOGICAL_CORES = "cpu_logical_cores"
  val CPU_MICROCODE = "cpu_microcode"
  val CPU_PHYSICAL_CORES = "cpu_physical_cores"
  val CPU_PRED_CMD_SUPPORTED = "cpu_pred_cmd_supported"
  val CPU_SET = "cpu_set"
  val CPU_SHARES = "cpu_shares"
  val CPU_SPEC_CTRL_SUPPORTED = "cpu_spec_ctrl_supported"
  val CPU_STATUS = "cpu_status"
  val CPU_SUBTYPE = "cpu_subtype"
  val CPU_TOTAL_USAGE = "cpu_total_usage"
  val CPU_TYPE = "cpu_type"
  val CPU_USERMODE_USAGE = "cpu_usermode_usage"
  val CPUS = "cpus"
  val CRASH_PATH = "crash_path"
  val CRASHED_THREAD = "crashed_thread"
  val CREATED = "created"
  val CREATED_AT = "created_at"
  val CREATED_BY = "created_by"
  val CREATED_TIME = "created_time"
  val CREATION_TIME = "creation_time"
  val CREATOR = "creator"
  val CREATOR_PID = "creator_pid"
  val CREATOR_UID = "creator_uid"
  val CSNAME = "csname"
  val CTIME = "ctime"
  val CURRENT_CAPACITY = "current_capacity"
  val CURRENT_CLOCK_SPEED = "current_clock_speed"
  val CURRENT_DIRECTORY = "current_directory"
  val CURRENT_DISK_QUEUE_LENGTH = "current_disk_queue_length"
  val CURRENT_VALUE = "current_value"
  val CWD = "cwd"
  val CYCLE_COUNT = "cycle_count"
  val DATA = "data"
  val DATA_WIDTH = "data_width"
  val DATABASE = "database"
  val DATE = "date"
  val DATETIME = "datetime"
  val DAY = "day"
  val DAY_OF_MONTH = "day_of_month"
  val DAY_OF_WEEK = "day_of_week"
  val DAYS = "days"
  val DC_SITE_NAME = "dc_site_name"
  val DECOMPRESSED = "decompressed"
  val DEFAULT_VALUE = "default_value"
  val DENIED_MASK = "denied_mask"
  val DENYLISTED = "denylisted"
  val DEPENDENCIES = "dependencies"
  val DEPTH = "depth"
  val DESCRIPTION = "description"
  val DESIGNED_CAPACITY = "designed_capacity"
  val DEST_PATH = "dest_path"
  val DESTINATION = "destination"
  val DESTINATION_ID = "destination_id"
  val DEV_ID_ENABLED = "dev_id_enabled"
  val DEVELOPER_ID = "developer_id"
  val DEVELOPMENT_REGION = "development_region"
  val DEVICE = "device"
  val DEVICE_ALIAS = "device_alias"
  val DEVICE_ERROR_ADDRESS = "device_error_address"
  val DEVICE_ID = "device_id"
  val DEVICE_LOCATOR = "device_locator"
  val DEVICE_MODEL = "device_model"
  val DEVICE_NAME = "device_name"
  val DEVICE_PATH = "device_path"
  val DEVICE_TYPE = "device_type"
  val DHCP_ENABLED = "dhcp_enabled"
  val DHCP_LEASE_EXPIRES = "dhcp_lease_expires"
  val DHCP_LEASE_OBTAINED = "dhcp_lease_obtained"
  val DHCP_SERVER = "dhcp_server"
  val DIRECTORY = "directory"
  val DISABLED = "disabled"
  val DISC_SHARING = "disc_sharing"
  val DISCONNECTED = "disconnected"
  val DISCOVERY_CACHE_HITS = "discovery_cache_hits"
  val DISCOVERY_EXECUTIONS = "discovery_executions"
  val DISK_BYTES_READ = "disk_bytes_read"
  val DISK_BYTES_WRITTEN = "disk_bytes_written"
  val DISK_ID = "disk_id"
  val DISK_INDEX = "disk_index"
  val DISK_READ = "disk_read"
  val DISK_SIZE = "disk_size"
  val DISK_WRITE = "disk_write"
  val DISPLAY_NAME = "display_name"
  val DNS_DOMAIN = "dns_domain"
  val DNS_DOMAIN_NAME = "dns_domain_name"
  val DNS_DOMAIN_SUFFIX_SEARCH_ORDER = "dns_domain_suffix_search_order"
  val DNS_FOREST_NAME = "dns_forest_name"
  val DNS_HOST_NAME = "dns_host_name"
  val DNS_SERVER_SEARCH_ORDER = "dns_server_search_order"
  val DOMAIN = "domain"
  val DOMAIN_CONTROLLER_ADDRESS = "domain_controller_address"
  val DOMAIN_CONTROLLER_NAME = "domain_controller_name"
  val DOMAIN_NAME = "domain_name"
  val DRIVE_LETTER = "drive_letter"
  val DRIVE_NAME = "drive_name"
  val DRIVER = "driver"
  val DRIVER_DATE = "driver_date"
  val DRIVER_KEY = "driver_key"
  val DRIVER_TYPE = "driver_type"
  val DRIVER_VERSION = "driver_version"
  val DST_IP = "dst_ip"
  val DST_MASK = "dst_mask"
  val DST_PORT = "dst_port"
  val DTIME = "dtime"
  val DUMP_CERTIFICATE = "dump_certificate"
  val DURATION = "duration"
  val EAPI = "eapi"
  val EGID = "egid"
  val EID = "eid"
  val EJECTABLE = "ejectable"
  val ELAPSED_TIME = "elapsed_time"
  val ELEMENT = "element"
  val ENABLE_IPV6 = "enable_ipv6"
  val ENABLED = "enabled"
  val ENABLED_NVRAM = "enabled_nvram"
  val ENCRYPTED = "encrypted"
  val ENCRYPTION = "encryption"
  val ENCRYPTION_METHOD = "encryption_method"
  val ENCRYPTION_STATUS = "encryption_status"
  val END = "end"
  val ENDING_ADDRESS = "ending_address"
  val ENDPOINT_ID = "endpoint_id"
  val ENTRY = "entry"
  val ENV = "env"
  val ENV_COUNT = "env_count"
  val ENV_SIZE = "env_size"
  val ENV_VARIABLES = "env_variables"
  val ENVIRONMENT = "environment"
  val EPHEMERAL = "ephemeral"
  val EPOCH = "epoch"
  val ERROR = "error"
  val ERROR_GRANULARITY = "error_granularity"
  val ERROR_OPERATION = "error_operation"
  val ERROR_RESOLUTION = "error_resolution"
  val ERROR_TYPE = "error_type"
  val EUID = "euid"
  val EVENT = "event"
  val EVENT_QUEUE = "event_queue"
  val EVENT_TAP_ID = "event_tap_id"
  val EVENT_TAPPED = "event_tapped"
  val EVENTID = "eventid"
  val EVENTS = "events"
  val EXCEPTION_ADDRESS = "exception_address"
  val EXCEPTION_CODE = "exception_code"
  val EXCEPTION_CODES = "exception_codes"
  val EXCEPTION_MESSAGE = "exception_message"
  val EXCEPTION_NOTES = "exception_notes"
  val EXCEPTION_TYPE = "exception_type"
  val EXECUTABLE = "executable"
  val EXECUTABLE_PATH = "executable_path"
  val EXECUTION_FLAG = "execution_flag"
  val EXECUTIONS = "executions"
  val EXIT_CODE = "exit_code"
  val EXPAND = "expand"
  val EXPIRE = "expire"
  val EXPIRES_AT = "expires_at"
  val EXTENDED_KEY_USAGE = "extended_key_usage"
  val EXTENSIONS = "extensions"
  val EXTERNAL = "external"
  val EXTRA = "extra"
  val FACILITY = "facility"
  val FAHRENHEIT = "fahrenheit"
  val FAILED_DISKS = "failed_disks"
  val FAILED_LOGIN_COUNT = "failed_login_count"
  val FAILED_LOGIN_TIMESTAMP = "failed_login_timestamp"
  val FAMILY = "family"
  val FAN = "fan"
  val FAULTS = "faults"
  val FD = "fd"
  val FEATURE = "feature"
  val FEATURE_CONTROL = "feature_control"
  val FIELD_NAME = "field_name"
  val FILE_ATTRIBUTES = "file_attributes"
  val FILE_BACKED = "file_backed"
  val FILE_ID = "file_id"
  val FILE_SHARING = "file_sharing"
  val FILE_SYSTEM = "file_system"
  val FILE_VERSION = "file_version"
  val FILENAME = "filename"
  val FILEPATH = "filepath"
  val FILESYSTEM = "filesystem"
  val FILETYPE = "filetype"
  val FILEVAULT_STATUS = "filevault_status"
  val FILTER = "filter"
  val FILTER_NAME = "filter_name"
  val FINGERPRINT = "fingerprint"
  val FINISHED_AT = "finished_at"
  val FIREWALL = "firewall"
  val FIREWALL_UNLOAD = "firewall_unload"
  val FIRMWARE_VERSION = "firmware_version"
  val FIX_COMMENTS = "fix_comments"
  val FLAG = "flag"
  val FLAGS = "flags"
  val FLATSIZE = "flatsize"
  val FOLDER_ID = "folder_id"
  val FOLLOWING = "following"
  val FORCED = "forced"
  val FORM_FACTOR = "form_factor"
  val FORMAT = "format"
  val FORWARDING_ENABLED = "forwarding_enabled"
  val FRAGMENT_PATH = "fragment_path"
  val FRAME_BACKTRACE = "frame_backtrace"
  val FREE = "free"
  val FREE_SPACE = "free_space"
  val FRIENDLY_NAME = "friendly_name"
  val FS_ID = "fs_id"
  val FSGID = "fsgid"
  val FSUID = "fsuid"
  val GATEWAY = "gateway"
  val GID = "gid"
  val GID_SIGNED = "gid_signed"
  val GIT_COMMIT = "git_commit"
  val GLOBAL_STATE = "global_state"
  val GO_VERSION = "go_version"
  val GPGCHECK = "gpgcheck"
  val GPGKEY = "gpgkey"
  val GRACE_PERIOD = "grace_period"
  val GROUP_SID = "group_sid"
  val GROUPNAME = "groupname"
  val GUEST = "guest"
  val GUEST_NICE = "guest_nice"
  val HANDLE = "handle"
  val HANDLE_COUNT = "handle_count"
  val HANDLER = "handler"
  val HARD_LIMIT = "hard_limit"
  val HARD_LINKS = "hard_links"
  val HARDWARE_MODEL = "hardware_model"
  val HARDWARE_SERIAL = "hardware_serial"
  val HARDWARE_VENDOR = "hardware_vendor"
  val HARDWARE_VERSION = "hardware_version"
  val HAS_EXPIRED = "has_expired"
  val HASH_ALG = "hash_alg"
  val HASH_RESOURCES = "hash_resources"
  val HASHED = "hashed"
  val HEADER = "header"
  val HEADER_SIZE = "header_size"
  val HEALTH = "health"
  val HIDDEN = "hidden"
  val HISTORY_FILE = "history_file"
  val HIT_COUNT = "hit_count"
  val HOME_DIRECTORY = "home_directory"
  val HOME_DIRECTORY_DRIVE = "home_directory_drive"
  val HOMEPAGE = "homepage"
  val HOP_LIMIT = "hop_limit"
  val HOPCOUNT = "hopcount"
  val HOST = "host"
  val HOST_IP = "host_ip"
  val HOST_PORT = "host_port"
  val HOSTNAME = "hostname"
  val HOSTNAMES = "hostnames"
  val HOTFIX_ID = "hotfix_id"
  val HOUR = "hour"
  val HOURS = "hours"
  val HTTP_PROXY = "http_proxy"
  val HTTPS_PROXY = "https_proxy"
  val HWADDR = "hwaddr"
  val IAM_ARN = "iam_arn"
  val IBRS_SUPPORT_ENABLED = "ibrs_support_enabled"
  val IBYTES = "ibytes"
  val ICON_MODE = "icon_mode"
  val ID = "id"
  val IDENTIFIER = "identifier"
  val IDENTIFYING_NUMBER = "identifying_number"
  val IDENTITY = "identity"
  val IDLE = "idle"
  val IDROPS = "idrops"
  val IDX = "idx"
  val IERRORS = "ierrors"
  val IMAGE = "image"
  val IMAGE_ID = "image_id"
  val IMAGES = "images"
  val IN_SMARTCTL_DB = "in_smartctl_db"
  val INACTIVE = "inactive"
  val INETD_COMPATIBILITY = "inetd_compatibility"
  val INF = "inf"
  val INFO = "info"
  val INFO_ACCESS = "info_access"
  val INFO_STRING = "info_string"
  val INHERITED_FROM = "inherited_from"
  val INIFACE = "iniface"
  val INIFACE_MASK = "iniface_mask"
  val INODE = "inode"
  val INODES = "inodes"
  val INODES_FREE = "inodes_free"
  val INODES_TOTAL = "inodes_total"
  val INODES_USED = "inodes_used"
  val INPUT_EAX = "input_eax"
  val INSTALL_DATE = "install_date"
  val INSTALL_LOCATION = "install_location"
  val INSTALL_SOURCE = "install_source"
  val INSTALL_TIME = "install_time"
  val INSTALLED_BY = "installed_by"
  val INSTALLED_ON = "installed_on"
  val INSTALLER_NAME = "installer_name"
  val INSTANCE_ID = "instance_id"
  val INSTANCE_IDENTIFIER = "instance_identifier"
  val INSTANCE_TYPE = "instance_type"
  val INSTANCES = "instances"
  val INTERFACE = "interface"
  val INTERLEAVE_DATA_DEPTH = "interleave_data_depth"
  val INTERLEAVE_POSITION = "interleave_position"
  val INTERNAL = "internal"
  val INTERNET_SETTINGS = "internet_settings"
  val INTERNET_SHARING = "internet_sharing"
  val INTERVAL = "interval"
  val IOWAIT = "iowait"
  val IP_ADDRESS = "ip_address"
  val IP_PREFIX_LEN = "ip_prefix_len"
  val IPACKETS = "ipackets"
  val IPC_NAMESPACE = "ipc_namespace"
  val IPV4_ADDRESS = "ipv4_address"
  val IPV4_FORWARDING = "ipv4_forwarding"
  val IPV4_INTERNET = "ipv4_internet"
  val IPV4_LOCAL_NETWORK = "ipv4_local_network"
  val IPV4_NO_TRAFFIC = "ipv4_no_traffic"
  val IPV4_SUBNET = "ipv4_subnet"
  val IPV6_ADDRESS = "ipv6_address"
  val IPV6_GATEWAY = "ipv6_gateway"
  val IPV6_INTERNET = "ipv6_internet"
  val IPV6_LOCAL_NETWORK = "ipv6_local_network"
  val IPV6_NO_TRAFFIC = "ipv6_no_traffic"
  val IPV6_PREFIX_LEN = "ipv6_prefix_len"
  val IPV6_SUBNET = "ipv6_subnet"
  val IRQ = "irq"
  val IS_ACTIVE = "is_active"
  val IS_ELEVATED_TOKEN = "is_elevated_token"
  val IS_HIDDEN = "is_hidden"
  val ISO_8601 = "iso_8601"
  val ISSUER = "issuer"
  val ISSUER_ALTERNATIVE_NAMES = "issuer_alternative_names"
  val ISSUER_COMMON_NAME = "issuer_common_name"
  val ISSUER_NAME = "issuer_name"
  val ISSUER_ORGANIZATION = "issuer_organization"
  val ISSUER_ORGANIZATION_UNIT = "issuer_organization_unit"
  val JOB_ID = "job_id"
  val JOB_PATH = "job_path"
  val JOB_TYPE = "job_type"
  val JSON_CMDLINE = "json_cmdline"
  val KEEP_ALIVE = "keep_alive"
  val KERNEL_MEMORY = "kernel_memory"
  val KERNEL_VERSION = "kernel_version"
  val KEY = "key"
  val KEY_ALGORITHM = "key_algorithm"
  val KEY_FILE = "key_file"
  val KEY_STRENGTH = "key_strength"
  val KEY_USAGE = "key_usage"
  val KEYCHAIN_PATH = "keychain_path"
  val KEYWORD = "keyword"
  val KEYWORDS = "keywords"
  val KVA_SHADOW_ENABLED = "kva_shadow_enabled"
  val KVA_SHADOW_INV_PCID = "kva_shadow_inv_pcid"
  val KVA_SHADOW_PCID = "kva_shadow_pcid"
  val KVA_SHADOW_USER_GLOBAL = "kva_shadow_user_global"
  val LABEL = "label"
  val LANGUAGE = "language"
  val LAST_CHANGE = "last_change"
  val LAST_CONNECTED = "last_connected"
  val LAST_EXECUTED = "last_executed"
  val LAST_EXECUTION_TIME = "last_execution_time"
  val LAST_HIT_DATE = "last_hit_date"
  val LAST_LOADED = "last_loaded"
  val LAST_OPENED_TIME = "last_opened_time"
  val LAST_RUN_CODE = "last_run_code"
  val LAST_RUN_MESSAGE = "last_run_message"
  val LAST_RUN_TIME = "last_run_time"
  val LAST_UNLOADED = "last_unloaded"
  val LAST_USED_AT = "last_used_at"
  val LAUNCH_TYPE = "launch_type"
  val LAYER_ID = "layer_id"
  val LAYER_ORDER = "layer_order"
  val LEVEL = "level"
  val LICENSE = "license"
  val LINK = "link"
  val LINK_SPEED = "link_speed"
  val LINKED_AGAINST = "linked_against"
  val LOAD_STATE = "load_state"
  val LOCAL_ADDRESS = "local_address"
  val LOCAL_HOSTNAME = "local_hostname"
  val LOCAL_IPV4 = "local_ipv4"
  val LOCAL_PORT = "local_port"
  val LOCAL_TIME = "local_time"
  val LOCAL_TIMEZONE = "local_timezone"
  val LOCALE = "locale"
  val LOCATION = "location"
  val LOCK = "lock"
  val LOCK_STATUS = "lock_status"
  val LOCKED = "locked"
  val LOG_FILE_DISK_QUOTA_MB = "log_file_disk_quota_mb"
  val LOG_FILE_DISK_QUOTA_PERCENTAGE = "log_file_disk_quota_percentage"
  val LOGGING_DRIVER = "logging_driver"
  val LOGGING_ENABLED = "logging_enabled"
  val LOGGING_OPTION = "logging_option"
  val LOGICAL_PROCESSORS = "logical_processors"
  val LOGON_DOMAIN = "logon_domain"
  val LOGON_ID = "logon_id"
  val LOGON_SCRIPT = "logon_script"
  val LOGON_SERVER = "logon_server"
  val LOGON_SID = "logon_sid"
  val LOGON_TIME = "logon_time"
  val LOGON_TYPE = "logon_type"
  val LU_WWN_DEVICE_ID = "lu_wwn_device_id"
  val MAC = "mac"
  val MAC_ADDRESS = "mac_address"
  val MACHINE = "machine"
  val MACHINE_NAME = "machine_name"
  val MAGIC_DB_FILES = "magic_db_files"
  val MAINTAINER = "maintainer"
  val MAJOR = "major"
  val MAJOR_VERSION = "major_version"
  val MANAGED = "managed"
  val MANUAL = "manual"
  val MANUFACTURE_DATE = "manufacture_date"
  val MANUFACTURER = "manufacturer"
  val MASK = "mask"
  val MATCH = "match"
  val MATCHES = "matches"
  val MAX = "max"
  val MAX_CAPACITY = "max_capacity"
  val MAX_CLOCK_SPEED = "max_clock_speed"
  val MAX_INSTANCES = "max_instances"
  val MAX_SPEED = "max_speed"
  val MAX_VOLTAGE = "max_voltage"
  val MAXIMUM_ALLOWED = "maximum_allowed"
  val MD5 = "md5"
  val MD_DEVICE_NAME = "md_device_name"
  val MECHANISM = "mechanism"
  val MED_CAPABILITY_CAPABILITIES = "med_capability_capabilities"
  val MED_CAPABILITY_INVENTORY = "med_capability_inventory"
  val MED_CAPABILITY_LOCATION = "med_capability_location"
  val MED_CAPABILITY_MDI_PD = "med_capability_mdi_pd"
  val MED_CAPABILITY_MDI_PSE = "med_capability_mdi_pse"
  val MED_CAPABILITY_POLICY = "med_capability_policy"
  val MED_DEVICE_TYPE = "med_device_type"
  val MED_POLICIES = "med_policies"
  val MEDIA_NAME = "media_name"
  val MEM = "mem"
  val MEMBER_CONFIG_DESCRIPTION = "member_config_description"
  val MEMBER_CONFIG_ENTITY = "member_config_entity"
  val MEMBER_CONFIG_KEY = "member_config_key"
  val MEMBER_CONFIG_NAME = "member_config_name"
  val MEMBER_CONFIG_VALUE = "member_config_value"
  val MEMORY = "memory"
  val MEMORY_ARRAY_ERROR_ADDRESS = "memory_array_error_address"
  val MEMORY_ARRAY_HANDLE = "memory_array_handle"
  val MEMORY_ARRAY_MAPPED_ADDRESS_HANDLE = "memory_array_mapped_address_handle"
  val MEMORY_DEVICE_HANDLE = "memory_device_handle"
  val MEMORY_ERROR_CORRECTION = "memory_error_correction"
  val MEMORY_ERROR_INFO_HANDLE = "memory_error_info_handle"
  val MEMORY_FREE = "memory_free"
  val MEMORY_LIMIT = "memory_limit"
  val MEMORY_MAX_USAGE = "memory_max_usage"
  val MEMORY_TOTAL = "memory_total"
  val MEMORY_TYPE = "memory_type"
  val MEMORY_TYPE_DETAILS = "memory_type_details"
  val MEMORY_USAGE = "memory_usage"
  val MESSAGE = "message"
  val METADATA_ENDPOINT = "metadata_endpoint"
  val METHOD = "method"
  val METRIC = "metric"
  val METRIC_NAME = "metric_name"
  val METRIC_VALUE = "metric_value"
  val MFT_ENTRY = "mft_entry"
  val MFT_SEQUENCE = "mft_sequence"
  val MIME_ENCODING = "mime_encoding"
  val MIME_TYPE = "mime_type"
  val MIN = "min"
  val MIN_API_VERSION = "min_api_version"
  val MIN_VERSION = "min_version"
  val MIN_VOLTAGE = "min_voltage"
  val MINIMUM_SYSTEM_VERSION = "minimum_system_version"
  val MINOR = "minor"
  val MINOR_VERSION = "minor_version"
  val MINUTE = "minute"
  val MINUTES = "minutes"
  val MINUTES_TO_FULL_CHARGE = "minutes_to_full_charge"
  val MINUTES_UNTIL_EMPTY = "minutes_until_empty"
  val MNT_NAMESPACE = "mnt_namespace"
  val MODE = "mode"
  val MODEL = "model"
  val MODEL_FAMILY = "model_family"
  val MODEL_ID = "model_id"
  val MODIFIED = "modified"
  val MODIFIED_TIME = "modified_time"
  val MODULE = "module"
  val MODULE_BACKTRACE = "module_backtrace"
  val MODULE_PATH = "module_path"
  val MONTH = "month"
  val MOUNT_NAMESPACE_ID = "mount_namespace_id"
  val MOUNT_POINT = "mount_point"
  val MOUNTABLE = "mountable"
  val MSIZE = "msize"
  val MTIME = "mtime"
  val MTU = "mtu"
  val NAME = "name"
  val NAME_CONSTRAINTS = "name_constraints"
  val NAMESPACE = "namespace"
  val NATIVE = "native"
  val NET_NAMESPACE = "net_namespace"
  val NETMASK = "netmask"
  val NETWORK_ID = "network_id"
  val NETWORK_NAME = "network_name"
  val NETWORK_RX_BYTES = "network_rx_bytes"
  val NETWORK_TX_BYTES = "network_tx_bytes"
  val NEXT_RUN_TIME = "next_run_time"
  val NICE = "nice"
  val NO_PROXY = "no_proxy"
  val NODE = "node"
  val NODE_REF_NUMBER = "node_ref_number"
  val NOISE = "noise"
  val NOT_VALID_AFTER = "not_valid_after"
  val NOT_VALID_BEFORE = "not_valid_before"
  val NR_RAID_DISKS = "nr_raid_disks"
  val NTIME = "ntime"
  val NUM_PROCS = "num_procs"
  val NUMBER = "number"
  val NUMBER_MEMORY_DEVICES = "number_memory_devices"
  val NUMBER_OF_CORES = "number_of_cores"
  val OBJECT_NAME = "object_name"
  val OBJECT_PATH = "object_path"
  val OBJECT_TYPE = "object_type"
  val OBYTES = "obytes"
  val ODROPS = "odrops"
  val OERRORS = "oerrors"
  val OFFER = "offer"
  val OFFSET = "offset"
  val OID = "oid"
  val OLD_PATH = "old_path"
  val ON_DEMAND = "on_demand"
  val ON_DISK = "on_disk"
  val ONLINE_CPUS = "online_cpus"
  val OOM_KILL_DISABLE = "oom_kill_disable"
  val OPACKETS = "opackets"
  val OPAQUE_VERSION = "opaque_version"
  val OPERATION = "operation"
  val OPTION = "option"
  val OPTION_NAME = "option_name"
  val OPTION_VALUE = "option_value"
  val OPTIONAL = "optional"
  val OPTIONAL_PERMISSIONS = "optional_permissions"
  val OPTIONS = "options"
  val ORGANIZATION = "organization"
  val ORGANIZATION_UNIT = "organization_unit"
  val ORIGINAL_PROGRAM_NAME = "original_program_name"
  val OS = "os"
  val OS_TYPE = "os_type"
  val OS_VERSION = "os_version"
  val OTHER = "other"
  val OUID = "ouid"
  val OUTIFACE = "outiface"
  val OUTIFACE_MASK = "outiface_mask"
  val OUTPUT_BIT = "output_bit"
  val OUTPUT_REGISTER = "output_register"
  val OUTPUT_SIZE = "output_size"
  val OVERFLOWS = "overflows"
  val OWNER_GID = "owner_gid"
  val OWNER_UID = "owner_uid"
  val OWNER_UUID = "owner_uuid"
  val PACKAGE = "package"
  val PACKAGE_FILENAME = "package_filename"
  val PACKAGE_GROUP = "package_group"
  val PACKAGE_ID = "package_id"
  val PACKET_DEVICE_TYPE = "packet_device_type"
  val PACKETS = "packets"
  val PACKETS_RECEIVED = "packets_received"
  val PACKETS_SENT = "packets_sent"
  val PAGE_INS = "page_ins"
  val PAGE_OUTS = "page_outs"
  val PARENT = "parent"
  val PARENT_REF_NUMBER = "parent_ref_number"
  val PART_NUMBER = "part_number"
  val PARTIAL = "partial"
  val PARTITION = "partition"
  val PARTITION_ROW_POSITION = "partition_row_position"
  val PARTITION_WIDTH = "partition_width"
  val PARTITIONS = "partitions"
  val PARTNER_FD = "partner_fd"
  val PARTNER_MODE = "partner_mode"
  val PARTNER_PID = "partner_pid"
  val PASSPOINT = "passpoint"
  val PASSWORD_LAST_SET_TIME = "password_last_set_time"
  val PASSWORD_STATUS = "password_status"
  val PATCH = "patch"
  val PATH = "path"
  val PCI_CLASS = "pci_class"
  val PCI_CLASS_ID = "pci_class_id"
  val PCI_SLOT = "pci_slot"
  val PCI_SUBCLASS = "pci_subclass"
  val PCI_SUBCLASS_ID = "pci_subclass_id"
  val PEM = "pem"
  val PERCENT_DISK_READ_TIME = "percent_disk_read_time"
  val PERCENT_DISK_TIME = "percent_disk_time"
  val PERCENT_DISK_WRITE_TIME = "percent_disk_write_time"
  val PERCENT_IDLE_TIME = "percent_idle_time"
  val PERCENT_PROCESSOR_TIME = "percent_processor_time"
  val PERCENT_REMAINING = "percent_remaining"
  val PERCENTAGE_ENCRYPTED = "percentage_encrypted"
  val PERF_CTL = "perf_ctl"
  val PERF_STATUS = "perf_status"
  val PERIOD = "period"
  val PERMANENT = "permanent"
  val PERMISSIONS = "permissions"
  val PERSISTENT = "persistent"
  val PERSISTENT_VOLUME_ID = "persistent_volume_id"
  val PGROUP = "pgroup"
  val PHYSICAL_ADAPTER = "physical_adapter"
  val PHYSICAL_MEMORY = "physical_memory"
  val PID = "pid"
  val PID_NAMESPACE = "pid_namespace"
  val PID_WITH_NAMESPACE = "pid_with_namespace"
  val PIDS = "pids"
  val PLACEMENT_GROUP_ID = "placement_group_id"
  val PLATFORM = "platform"
  val PLATFORM_FAULT_DOMAIN = "platform_fault_domain"
  val PLATFORM_INFO = "platform_info"
  val PLATFORM_LIKE = "platform_like"
  val PLATFORM_MASK = "platform_mask"
  val PLATFORM_UPDATE_DOMAIN = "platform_update_domain"
  val PLUGIN = "plugin"
  val PNP_DEVICE_ID = "pnp_device_id"
  val POINT_TO_POINT = "point_to_point"
  val POINTS = "points"
  val POLICIES = "policies"
  val POLICY = "policy"
  val POLICY_CONSTRAINTS = "policy_constraints"
  val POLICY_MAPPINGS = "policy_mappings"
  val PORT = "port"
  val PORT_AGGREGATION_ID = "port_aggregation_id"
  val PORT_AUTONEG_1000BASET_FD_ENABLED = "port_autoneg_1000baset_fd_enabled"
  val PORT_AUTONEG_1000BASET_HD_ENABLED = "port_autoneg_1000baset_hd_enabled"
  val PORT_AUTONEG_1000BASEX_FD_ENABLED = "port_autoneg_1000basex_fd_enabled"
  val PORT_AUTONEG_1000BASEX_HD_ENABLED = "port_autoneg_1000basex_hd_enabled"
  val PORT_AUTONEG_100BASET2_FD_ENABLED = "port_autoneg_100baset2_fd_enabled"
  val PORT_AUTONEG_100BASET2_HD_ENABLED = "port_autoneg_100baset2_hd_enabled"
  val PORT_AUTONEG_100BASET4_FD_ENABLED = "port_autoneg_100baset4_fd_enabled"
  val PORT_AUTONEG_100BASET4_HD_ENABLED = "port_autoneg_100baset4_hd_enabled"
  val PORT_AUTONEG_100BASETX_FD_ENABLED = "port_autoneg_100basetx_fd_enabled"
  val PORT_AUTONEG_100BASETX_HD_ENABLED = "port_autoneg_100basetx_hd_enabled"
  val PORT_AUTONEG_10BASET_FD_ENABLED = "port_autoneg_10baset_fd_enabled"
  val PORT_AUTONEG_10BASET_HD_ENABLED = "port_autoneg_10baset_hd_enabled"
  val PORT_AUTONEG_ENABLED = "port_autoneg_enabled"
  val PORT_AUTONEG_SUPPORTED = "port_autoneg_supported"
  val PORT_DESCRIPTION = "port_description"
  val PORT_ID = "port_id"
  val PORT_ID_TYPE = "port_id_type"
  val PORT_MAU_TYPE = "port_mau_type"
  val PORT_MFS = "port_mfs"
  val PORT_TTL = "port_ttl"
  val POSSIBLY_HIDDEN = "possibly_hidden"
  val POWER_8023AT_ENABLED = "power_8023at_enabled"
  val POWER_8023AT_POWER_ALLOCATED = "power_8023at_power_allocated"
  val POWER_8023AT_POWER_PRIORITY = "power_8023at_power_priority"
  val POWER_8023AT_POWER_REQUESTED = "power_8023at_power_requested"
  val POWER_8023AT_POWER_SOURCE = "power_8023at_power_source"
  val POWER_8023AT_POWER_TYPE = "power_8023at_power_type"
  val POWER_CLASS = "power_class"
  val POWER_DEVICE_TYPE = "power_device_type"
  val POWER_MDI_ENABLED = "power_mdi_enabled"
  val POWER_MDI_SUPPORTED = "power_mdi_supported"
  val POWER_MODE = "power_mode"
  val POWER_PAIRCONTROL_ENABLED = "power_paircontrol_enabled"
  val POWER_PAIRS = "power_pairs"
  val PPID = "ppid"
  val PPVIDS_ENABLED = "ppvids_enabled"
  val PPVIDS_SUPPORTED = "ppvids_supported"
  val PRE_CPU_KERNELMODE_USAGE = "pre_cpu_kernelmode_usage"
  val PRE_CPU_TOTAL_USAGE = "pre_cpu_total_usage"
  val PRE_CPU_USERMODE_USAGE = "pre_cpu_usermode_usage"
  val PRE_ONLINE_CPUS = "pre_online_cpus"
  val PRE_SYSTEM_CPU_USAGE = "pre_system_cpu_usage"
  val PREREAD = "preread"
  val PRINCIPAL = "principal"
  val PRINTER_SHARING = "printer_sharing"
  val PRIORITY = "priority"
  val PRIVILEGED = "privileged"
  val PROBE_ERROR = "probe_error"
  val PROCESS = "process"
  val PROCESS_BEING_TAPPED = "process_being_tapped"
  val PROCESS_TYPE = "process_type"
  val PROCESS_UPTIME = "process_uptime"
  val PROCESSES = "processes"
  val PROCESSING_TIME = "processing_time"
  val PROCESSOR_NUMBER = "processor_number"
  val PROCESSOR_TYPE = "processor_type"
  val PRODUCT_VERSION = "product_version"
  val PROFILE = "profile"
  val PROFILE_PATH = "profile_path"
  val PROGRAM = "program"
  val PROGRAM_ARGUMENTS = "program_arguments"
  val PROPAGATION = "propagation"
  val PROTECTED = "protected"
  val PROTECTION_DISABLED = "protection_disabled"
  val PROTECTION_STATUS = "protection_status"
  val PROTOCOL = "protocol"
  val PROVIDER = "provider"
  val PROVIDER_GUID = "provider_guid"
  val PROVIDER_NAME = "provider_name"
  val PSEUDO = "pseudo"
  val PSIZE = "psize"
  val PUBLIC = "public"
  val PUBLISHER = "publisher"
  val PURGEABLE = "purgeable"
  val PURGED = "purged"
  val PVID = "pvid"
  val QUERY = "query"
  val QUERY_LANGUAGE = "query_language"
  val QUEUE_DIRECTORIES = "queue_directories"
  val RAID_DISKS = "raid_disks"
  val RAID_LEVEL = "raid_level"
  val RAPL_ENERGY_STATUS = "rapl_energy_status"
  val RAPL_POWER_LIMIT = "rapl_power_limit"
  val RAPL_POWER_UNITS = "rapl_power_units"
  val REACTIVATED = "reactivated"
  val READ = "read"
  val READ_DEVICE_IDENTITY_FAILURE = "read_device_identity_failure"
  val READONLY = "readonly"
  val READONLY_ROOTFS = "readonly_rootfs"
  val RECORD_TIMESTAMP = "record_timestamp"
  val RECORD_USN = "record_usn"
  val RECOVERY_FINISH = "recovery_finish"
  val RECOVERY_PROGRESS = "recovery_progress"
  val RECOVERY_SPEED = "recovery_speed"
  val REDIRECT_ACCEPT = "redirect_accept"
  val REF_PID = "ref_pid"
  val REF_PROC = "ref_proc"
  val REFRESHES = "refreshes"
  val REFS = "refs"
  val REGION = "region"
  val REGISTERS = "registers"
  val REGISTRY = "registry"
  val REGISTRY_HIVE = "registry_hive"
  val REGISTRY_PATH = "registry_path"
  val RELATIVE_PATH = "relative_path"
  val RELEASE = "release"
  val REMEDIATION_PATH = "remediation_path"
  val REMOTE_ADDRESS = "remote_address"
  val REMOTE_APPLE_EVENTS = "remote_apple_events"
  val REMOTE_LOGIN = "remote_login"
  val REMOTE_MANAGEMENT = "remote_management"
  val REMOTE_PORT = "remote_port"
  val REMOVABLE = "removable"
  val REPOSITORY = "repository"
  val REQUEST_ID = "request_id"
  val REQUESTED_MASK = "requested_mask"
  val REQUIREMENT = "requirement"
  val RESERVATION_ID = "reservation_id"
  val RESHAPE_FINISH = "reshape_finish"
  val RESHAPE_PROGRESS = "reshape_progress"
  val RESHAPE_SPEED = "reshape_speed"
  val RESIDENT_SIZE = "resident_size"
  val RESOURCE_GROUP_NAME = "resource_group_name"
  val RESPONSE_CODE = "response_code"
  val RESPONSIBLE = "responsible"
  val RESULT = "result"
  val RESYNC_FINISH = "resync_finish"
  val RESYNC_PROGRESS = "resync_progress"
  val RESYNC_SPEED = "resync_speed"
  val RETAIN_COUNT = "retain_count"
  val REVISION = "revision"
  val RID = "rid"
  val ROAMING = "roaming"
  val ROAMING_PROFILE = "roaming_profile"
  val ROOT = "root"
  val ROOT_DIR = "root_dir"
  val ROOT_DIRECTORY = "root_directory"
  val ROOT_VOLUME_UUID = "root_volume_uuid"
  val ROTATION_RATE = "rotation_rate"
  val ROUND_TRIP_TIME = "round_trip_time"
  val ROWID = "rowid"
  val RSSI = "rssi"
  val RTADV_ACCEPT = "rtadv_accept"
  val RULE_DETAILS = "rule_details"
  val RUN_AT_LOAD = "run_at_load"
  val RW = "rw"
  val SATA_VERSION = "sata_version"
  val SCHEME = "scheme"
  val SCOPE = "scope"
  val SCREEN_SHARING = "screen_sharing"
  val SCRIPT = "script"
  val SCRIPT_BLOCK_COUNT = "script_block_count"
  val SCRIPT_BLOCK_ID = "script_block_id"
  val SCRIPT_FILE_NAME = "script_file_name"
  val SCRIPT_NAME = "script_name"
  val SCRIPT_PATH = "script_path"
  val SCRIPT_TEXT = "script_text"
  val SCRIPTING_ENGINE = "scripting_engine"
  val SDB_ID = "sdb_id"
  val SDK = "sdk"
  val SDK_VERSION = "sdk_version"
  val SECONDS = "seconds"
  val SECTION = "section"
  val SECTOR_SIZES = "sector_sizes"
  val SECURITY_BREACH = "security_breach"
  val SECURITY_GROUPS = "security_groups"
  val SECURITY_OPTIONS = "security_options"
  val SECURITY_TYPE = "security_type"
  val SELF_SIGNED = "self_signed"
  val SENDER = "sender"
  val SENSOR_BACKEND_SERVER = "sensor_backend_server"
  val SENSOR_ID = "sensor_id"
  val SENSOR_IP_ADDR = "sensor_ip_addr"
  val SERIAL = "serial"
  val SERIAL_NUMBER = "serial_number"
  val SERIAL_PORT_ENABLED = "serial_port_enabled"
  val SERIES = "series"
  val SERVER_NAME = "server_name"
  val SERVER_VERSION = "server_version"
  val SERVICE = "service"
  val SERVICE_EXIT_CODE = "service_exit_code"
  val SERVICE_KEY = "service_key"
  val SERVICE_TYPE = "service_type"
  val SESSION_ID = "session_id"
  val SESSION_OWNER = "session_owner"
  val SET = "set"
  val SEVERITY = "severity"
  val SGID = "sgid"
  val SHA1 = "sha1"
  val SHA1_FINGERPRINT = "sha1_fingerprint"
  val SHA256 = "sha256"
  val SHA256_FINGERPRINT = "sha256_fingerprint"
  val SHARD = "shard"
  val SHARE = "share"
  val SHARED = "shared"
  val SHELL = "shell"
  val SHELL_ONLY = "shell_only"
  val SHMID = "shmid"
  val SID = "sid"
  val SIG_GROUP = "sig_group"
  val SIGFILE = "sigfile"
  val SIGNATURE = "signature"
  val SIGNATURE_ALGORITHM = "signature_algorithm"
  val SIGNATURES_UP_TO_DATE = "signatures_up_to_date"
  val SIGNED = "signed"
  val SIGNING_ALGORITHM = "signing_algorithm"
  val SIGRULE = "sigrule"
  val SIGURL = "sigurl"
  val SIZE = "size"
  val SIZE_BYTES = "size_bytes"
  val SKU = "sku"
  val SLOT = "slot"
  val SMART_ENABLED = "smart_enabled"
  val SMART_SUPPORTED = "smart_supported"
  val SMBIOS_TAG = "smbios_tag"
  val SOCKET = "socket"
  val SOCKET_DESIGNATION = "socket_designation"
  val SOFT_LIMIT = "soft_limit"
  val SOFTIRQ = "softirq"
  val SOURCE = "source"
  val SOURCE_PATH = "source_path"
  val SOURCE_URL = "source_url"
  val SPACE_TOTAL = "space_total"
  val SPACE_USED = "space_used"
  val SPARE_DISKS = "spare_disks"
  val SPECULATIVE = "speculative"
  val SPEED = "speed"
  val SRC_IP = "src_ip"
  val SRC_MASK = "src_mask"
  val SRC_PORT = "src_port"
  val SSDEEP = "ssdeep"
  val SSH_CONFIG_FILE = "ssh_config_file"
  val SSH_PUBLIC_KEY = "ssh_public_key"
  val SSID = "ssid"
  val STACK_TRACE = "stack_trace"
  val START = "start"
  val START_INTERVAL = "start_interval"
  val START_ON_MOUNT = "start_on_mount"
  val START_TIME = "start_time"
  val START_TYPE = "start_type"
  val STARTED_AT = "started_at"
  val STARTING_ADDRESS = "starting_address"
  val STATE = "state"
  val STATE_TIMESTAMP = "state_timestamp"
  val STATEFUL = "stateful"
  val STATENAME = "statename"
  val STATUS = "status"
  val STDERR_PATH = "stderr_path"
  val STDOUT_PATH = "stdout_path"
  val STEAL = "steal"
  val STEALTH_ENABLED = "stealth_enabled"
  val STIBP_SUPPORT_ENABLED = "stibp_support_enabled"
  val STORAGE_DRIVER = "storage_driver"
  val STORE = "store"
  val STORE_ID = "store_id"
  val STORE_LOCATION = "store_location"
  val STRINGS = "strings"
  val SUB_STATE = "sub_state"
  val SUBCLASS = "subclass"
  val SUBJECT = "subject"
  val SUBJECT_ALTERNATIVE_NAMES = "subject_alternative_names"
  val SUBJECT_INFO_ACCESS = "subject_info_access"
  val SUBJECT_KEY_ID = "subject_key_id"
  val SUBJECT_KEY_IDENTIFIER = "subject_key_identifier"
  val SUBJECT_NAME = "subject_name"
  val SUBKEY = "subkey"
  val SUBNET = "subnet"
  val SUBSCRIPTION_ID = "subscription_id"
  val SUBSCRIPTIONS = "subscriptions"
  val SUBSYSTEM = "subsystem"
  val SUBSYSTEM_MODEL = "subsystem_model"
  val SUBSYSTEM_MODEL_ID = "subsystem_model_id"
  val SUBSYSTEM_VENDOR = "subsystem_vendor"
  val SUBSYSTEM_VENDOR_ID = "subsystem_vendor_id"
  val SUCCESS = "success"
  val SUID = "suid"
  val SUMMARY = "summary"
  val SUPERBLOCK_STATE = "superblock_state"
  val SUPERBLOCK_UPDATE_TIME = "superblock_update_time"
  val SUPERBLOCK_VERSION = "superblock_version"
  val SWAP_CACHED = "swap_cached"
  val SWAP_FREE = "swap_free"
  val SWAP_INS = "swap_ins"
  val SWAP_LIMIT = "swap_limit"
  val SWAP_OUTS = "swap_outs"
  val SWAP_TOTAL = "swap_total"
  val SYMLINK = "symlink"
  val SYSCALL = "syscall"
  val SYSTEM = "system"
  val SYSTEM_CPU_USAGE = "system_cpu_usage"
  val SYSTEM_MODEL = "system_model"
  val SYSTEM_TIME = "system_time"
  val TABLE = "table"
  val TAG = "tag"
  val TAGS = "tags"
  val TAPPING_PROCESS = "tapping_process"
  val TARGET = "target"
  val TARGET_NAME = "target_name"
  val TARGET_PATH = "target_path"
  val TASK = "task"
  val TEAM = "team"
  val TEAM_IDENTIFIER = "team_identifier"
  val TEMPORARILY_DISABLED = "temporarily_disabled"
  val TERMINAL = "terminal"
  val THREADS = "threads"
  val THROTTLED = "throttled"
  val TID = "tid"
  val TIME = "time"
  val TIME_NANO_SEC = "time_nano_sec"
  val TIME_RANGE = "time_range"
  val TIMEOUT = "timeout"
  val TIMESTAMP = "timestamp"
  val TIMESTAMP_MS = "timestamp_ms"
  val TIMEZONE = "timezone"
  val TITLE = "title"
  val TOTAL_SECONDS = "total_seconds"
  val TOTAL_SIZE = "total_size"
  val TOTAL_WIDTH = "total_width"
  val TRANSACTION_ID = "transaction_id"
  val TRANSMIT_RATE = "transmit_rate"
  val TRANSPORT_TYPE = "transport_type"
  val TRIES = "tries"
  val TTY = "tty"
  val TURBO_DISABLED = "turbo_disabled"
  val TURBO_RATIO_LIMIT = "turbo_ratio_limit"
  val TYPE = "type"
  val UID = "uid"
  val UID_SIGNED = "uid_signed"
  val UMCI_POLICY_STATUS = "umci_policy_status"
  val UNCOMPRESSED = "uncompressed"
  val UNINSTALL_STRING = "uninstall_string"
  val UNIQUE_CHIP_ID = "unique_chip_id"
  val UNIX_TIME = "unix_time"
  val UNMASK = "unmask"
  val UNUSED_DEVICES = "unused_devices"
  val UPDATE_SOURCE_ALIAS = "update_source_alias"
  val UPDATE_SOURCE_CERTIFICATE = "update_source_certificate"
  val UPDATE_SOURCE_PROTOCOL = "update_source_protocol"
  val UPDATE_SOURCE_SERVER = "update_source_server"
  val UPDATE_URL = "update_url"
  val UPID = "upid"
  val UPLOADED_AT = "uploaded_at"
  val UPN = "upn"
  val UPPID = "uppid"
  val UPTIME = "uptime"
  val URL = "url"
  val USB_ADDRESS = "usb_address"
  val USB_PORT = "usb_port"
  val USE = "use"
  val USED_BY = "used_by"
  val USER = "user"
  val USER_ACCOUNT = "user_account"
  val USER_ACCOUNT_CONTROL = "user_account_control"
  val USER_ACTION = "user_action"
  val USER_AGENT = "user_agent"
  val USER_CAPACITY = "user_capacity"
  val USER_NAMESPACE = "user_namespace"
  val USER_TIME = "user_time"
  val USER_UUID = "user_uuid"
  val USERNAME = "username"
  val USES_PATTERN = "uses_pattern"
  val UTS_NAMESPACE = "uts_namespace"
  val UUID = "uuid"
  val VADDR = "vaddr"
  val VALID_FROM = "valid_from"
  val VALID_TO = "valid_to"
  val VALUE = "value"
  val VALUETYPE = "valuetype"
  val VARIABLE = "variable"
  val VBS_STATUS = "vbs_status"
  val VENDOR = "vendor"
  val VENDOR_ID = "vendor_id"
  val VENDOR_SYNDROME = "vendor_syndrome"
  val VERSION = "version"
  val VIDEO_MODE = "video_mode"
  val VISIBLE = "visible"
  val VISIBLE_ALARM = "visible_alarm"
  val VLANS = "vlans"
  val VM_ID = "vm_id"
  val VM_SCALE_SET_NAME = "vm_scale_set_name"
  val VM_SIZE = "vm_size"
  val VOLTAGE = "voltage"
  val VOLUME_ID = "volume_id"
  val VOLUME_SERIAL = "volume_serial"
  val VOLUME_SIZE = "volume_size"
  val WALL_TIME = "wall_time"
  val WARNING = "warning"
  val WARNINGS = "warnings"
  val WATCH_PATHS = "watch_paths"
  val WATCHER = "watcher"
  val WEEKDAY = "weekday"
  val WIN32_EXIT_CODE = "win32_exit_code"
  val WIN_TIMESTAMP = "win_timestamp"
  val WINDOWS_SECURITY_CENTER_SERVICE = "windows_security_center_service"
  val WIRED = "wired"
  val WIRED_SIZE = "wired_size"
  val WORKING_DIRECTORY = "working_directory"
  val WORKING_DISKS = "working_disks"
  val WORLD = "world"
  val WRITABLE = "writable"
  val XPATH = "xpath"
  val YEAR = "year"
  val ZERO_FILL = "zero_fill"
  val ZONE = "zone"

  /**
   * ADDITIONAL EVENT FIELD NAMES
   */
  val CALENDAR_TIME = "calendarTime"
  /**
   * EDGE NAMES
   */
  val AT_TIME         = "at_time"
  val BELONGS_TO      = "belongs_to"
  val EXECUTES        = "executes"
  val HAS_CHILD       = "has_child"
  val HAS_CONN        = "has_conn"
  val HAS_FILE        = "has_file"
  val HAS_HASH        = "has_hash"
  val HAS_HOME_DIR    = "has_home_dir"
  val HAS_PROCESS     = "has_process"
  val HAS_SHELL       = "has_shell"
  val HAS_SOCKET      = "has_socket"
  val HAS_USER        = "has_user"
  val HAS_VIRTUAL_DIR = "has_virtual_dir"
  val HAS_WORKING_DIR = "has_working_dir"

  val md: MessageDigest =
    MessageDigest.getInstance("MD5")
  /**
   * The list of vertex entries extract from a log
   * entry
   */
  val vertices: mutable.ArrayBuffer[Vertex] =
    mutable.ArrayBuffer.empty[Vertex]
  /**
   * The list of edge entries extract from a log
   * entry
   */
  val edges: mutable.ArrayBuffer[Edge] =
    mutable.ArrayBuffer.empty[Edge]

  /**
   * A helper method to generate an IP Address vertex
   */
  def addressVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "ip_address", label, props)
  }
  /**
   * A helper method to generate a connection vertex
   */
  def connVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "conn", label, props)
  }
  /**
   * A helper method to generate a Directory vertex
   */
  def directoryVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "directory", label, props)
  }
  /**
   * A helper method to generate a File vertex
   */
  def fileVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "file", label, props)
  }
  /**
   * A helper method to generate a Group vertex
   */
  def groupVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "group", label, props)
  }
  /**
   * A helper method to generate a Host vertex
   */
  def hostVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "host", label, props)
  }
  /**
   * A helper method to generate a Port vertex
   */
  def portVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "port", label, props)
  }
  /**
   * A helper method to generate a Process vertex
   */
  def processVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "process", label, props)
  }
  /**
   * A helper method to generate a Shell vertex
   */
  def shellVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "shell", label, props)
  }
  /**
   * A helper method to generate a Socket vertex
   */
  def socketVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "socket", label, props)
  }
  /**
   * A helper method to generate a Time vertex
   */
  def timeVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "timestamp", label, props)
  }
  /**
   * A helper method to generate a User vertex
   */
  def userVertex(id:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {
    buildVertex(id, "user", label, props)
  }
  /**
   * A helper method to ease the generation of an edge
   */
  def buildEdge(from:String, to:String, label:String):Edge = {
    Edge(
      id = buildHashValue(Seq(from, to, label)),
      idType = "STRING",
      label = label,
      fromId = from,
      fromIdType = "STRING",
      toId = to,
      toIdType = "STRING")
  }

  def buildVertex(id:String, `type`:String, label:String, props:Option[Map[String, Seq[String]]]=None):Vertex = {

    val vertexProps =
      if (props.isDefined)
        props.get ++ Map(TYPE -> Seq("STRING", `type`))

      else
        Map(TYPE -> Seq("STRING", `type`))

    Vertex(id = id, idType = "STRING", label = label, properties = Some(vertexProps))

  }

  def buildHashValue(values:Seq[String]):String = {

    val bytes = values.mkString("|").getBytes
    val digest = md.digest(bytes)

    new BigInteger(1, digest).toString(16)

  }

  def getIntValue(json:JsonObject, name:String):String = {
    val value = json.get(name).getAsJsonPrimitive
    if (value.isNumber) value.getAsInt.toString else value.getAsString
  }

  def getLongValue(json:JsonObject, name:String):String = {
    val value = json.get(name).getAsJsonPrimitive
    if (value.isNumber) value.getAsLong.toString else value.getAsString
  }

  def buildTimeHash(timestamp:Long):String = ???

}
